<style>
    .noty_body {
        /*width: 650px;
       position */
        margin: 0px auto;
        text-align: center;
    }
</style>

<div class="container">
    <div class="col-md-offset-2 col-md-8">
        <div class="panel panel-primary">
            <div class="panel-heading">
                <div class="panel-title"><h3>Assign Instructor for <span style="text-decoration:underline;" id="accountNameTextBlock"></span></h3></div>
            </div>
            <div class="panel-body">
                <form id="dataForm" name="dataForm" role="form" class="form-horizontal">
                    <div class="form-group">
                        <label class="control-label col-md-3" for="instructorIdInput">Instructor</label>
                        <div class="col-md-4">
                            <select id="instructorIdInput" class="form-control input-group-sm">
                                <option value="0">--SELECT INSTRUCTOR--</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3" for="commentsInput">Comments</label>
                        <div class="col-md-6">
                            <input id="commentsInput" name="commentsInput" type="text" class="form-control input-lg">
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3" for="wageRateInput">Wage Rate</label>
                        <div class="col-md-6">
                            <input id="wageRateInput" name="wageRateInput" type="text" class="form-control input-lg">
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="control-label col-md-3" for="effectiveStartDateInput">Effective start date</label>
                        <div class="col-md-7">
                            <div class="input-group">
                                <div class="input-group input-append date" id="effectiveStartDateDatePicker">
                                    <input type="text" class="form-control input-lg startDate  " id="effectiveStartDateInput" name="effectiveStartDateInput" />
                                    <span class="input-group-addon add-on"><span class="glyphicon glyphicon-calendar"></span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-3" for="effectiveEndDateInput">Effective end date</label>
                        <div class="col-md-7">
                            <div class="input-group">
                                <div class="input-group input-append date" id="effectiveEndDateDatePicker">
                                    <input type="text" class="form-control input-lg endDate" id="effectiveEndDateInput" name="effectiveEndDateInput" />
                                    <span class="input-group-addon add-on"><span class="glyphicon glyphicon-calendar"></span></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    @*<div class="form-group">
                            <label class="control-label col-md-3" for="isCurrentInput">Is current</label>
                            <div class="col-md-3">
                                <div class="make-switch" data-on="primary" data-off="info">
                                    <input type="checkbox" id="isCurrentInput" name="isCurrentInput" checked>
                                </div>
                            </div>
                        </div>*@
                    <div class="form-group col-md-12">
                        <label class="control-label col-md-1"></label>
                        <div class="col-md-10">
                            <div class="pull-right">
                                <input type="button" class="btn btn-primary" value="Save" id="saveButton" />
                                <a id="goToManageInstructorAccountLink" class="btn btn-default" asp-action="ManageInstructorAccount" asp-controler="InstructorAccounts">Cancel</a>
                                @*<a class="btn btn-default" href="/InstructorAccounts/ManageInstructorAccount" id="navigationBackToManageInstructorAccountLink">Cancel</a>*@
                            </div>
                        </div>
                    </div>
                </form>
            </div><!-- end of div element which has the class="panel-body" -->
        </div><!-- end of the div element which has the class="panel" -->
    </div><!-- end of the div element which has class="col-md-offset-2 col-md-8" -->
</div><!-- end of div element which has the class="container" -->
<!-- End of main div element to contain all
        the web form interface elements -->

@section Scripts{
    <link href="~/lib/bootstrap-datepicker/dist/css/bootstrap-datepicker3.css" rel="stylesheet" />
    <link href="~/lib/bootstrap-switch/dist/css/bootstrap3/bootstrap-switch.min.css" rel="stylesheet" />
    <script src="~/lib/bootstrap-datepicker/dist/js/bootstrap-datepicker.js"></script>
    <script src="~/lib/bootstrap-switch/dist/js/bootstrap-switch.min.js" type="text/javascript"></script>

    <script>
        $('#accountNameTextBlock').text(getCustomerAccountNameFromCookie());
        //window.customerAccountId = getCustomerAccountIdFromCookie();


        function getIdFromAddressBar() {
            var urlArray = window.location.href.split('/');
            var id = urlArray[urlArray.length - 1];
            return id;
        };

        function getCustomerAccountNameFromCookie() {
            //Obtain the customer account name from the cookie
            //customer_account_name
            var customerAccount = Cookies.getJSON('customer_account');
            return he.decode(customerAccount.accountName);//https://www.w3schools.com/jsref/jsref_decodeuricomponent.asp
        }
        function getCustomerAccountIdFromCookie() {
            //Obtain the customer account name from the cookie
            //customer_account_name
            var customerAccount = Cookies.getJSON('customer_account');
            console.dir(customerAccount);
            return customerAccount.customerAccountId;//https://www.w3schools.com/jsref/jsref_decodeuricomponent.asp
        }
        window.customerAccountId = getIdFromAddressBar();
        $('#goToManageInstructorAccountLink').attr('href', '/InstructorAccounts/ManageInstructorAccount/' + window.customerAccountId);

        $('#effectiveStartDateDatePicker')
            .datepicker({
                format: 'dd/mm/yyyy'
            })
            .on('changeDate', function (e) {
                // Revalidate the date field

            });
        $('#effectiveEndDateDatePicker')
            .datepicker({
                format: 'dd/mm/yyyy'
            })
            .on('changeDate', function (e) {
                // Revalidate the date field
            });

        setupInstructorListBox();
        function setupInstructorListBox() {

            var $dataCommunicationTracker = jQuery.ajax({
                contentType: 'application/json',
                method: 'get',
                url: '/Api/UserInfo/GetAllActiveInstructorData',
            });
            $dataCommunicationTracker.done(function (data, textStatus, jqXHR) {
                var $instructorIdInputElement = jQuery('#instructorIdInput');
                var $optionElement = null;
                for (index = 0; index < data.length; index++) {
                    oneInstructor = data[index];
                    $optionElement = jQuery('<option>')
                        .text(oneInstructor.fullName)
                        .attr('value', oneInstructor.instructorId);
                    $instructorIdInputElement.append($optionElement);
                }
            });
            $dataCommunicationTracker.fail(function (data, textStatus, jqXHR) {
                console.dir(data);
                console.dir(textStatus);
                console.dir(jqXHR);
            });
        }//end of setupRoomListBox() function



        function InstructorAccount(inCustomerAccountId, inInstructorId, inComments, inWageRate, inEffectiveStartDate,
            inEffectiveEndDate /*,inIsCurrent*/) {
            this.customerAccountId = inCustomerAccountId;
            this.instructorId = inInstructorId;
            this.comments = inComments;
            this.wageRate = inWageRate;
            this.effectiveStartDate = inEffectiveStartDate;
            this.effectiveEndDate = inEffectiveEndDate;
            //this.isCurrent = inIsCurrent;
        }

        $('#saveButton').on('click', function () {
            if ($('#dataForm').valid() == true) {
                var collectedInstructorId = $('#instructorIdInput').val();
                var collectedComments = $('#commentsInput').val();
                var collectedWageRate = $('#wageRateInput').val();

                var collectedEffectiveStartDate = $('#effectiveStartDateInput').val();
                var collectedEffectiveEndDate = $('#effectiveEndDateInput').val();
                //var collectedIsCurrent = $("#isCurrentInput").bootstrapSwitch('state');


                var instructorAccount = new InstructorAccount(
                    window.customerAccountId, collectedInstructorId, collectedComments, collectedWageRate,
                    collectedEffectiveStartDate, collectedEffectiveEndDate/*, collectedIsCurrent*/);

                $saveDataHandler = jQuery.ajax({
                    type: 'POST',
                    url: '/API/InstructorAccounts/AssignOneInstructorToCustomerAccount',
                    dataType: 'json',
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader('RequestVerificationToken', $('input[name=__RequestVerificationToken]').val());
                    },
                    data: instructorAccount,
                    contentType: 'application/x-www-form-urlencoded',

                })

                $saveDataHandler.done(function (data, textStatus, jqXHR) {
                    var anyAccountDetailRecords = data.anyAccountDetailRecords;
                    if (anyAccountDetailRecords.anyAccountDetailList.length == 0) {
                        var resultInHTML = '<div style="margin:0px auto" class="top-center" >' + data.message +
                            '<br> Warning: There are <b>no Timetable Details</b> made for this Account' + ', Instructor may not be able to generate TimeSheet Data </div>';
                        /* + data.message + " " + data.anyAccountDetailRecords.message +*/

                        console.dir("are u workin");

                        new Noty({
                            theme: 'bootstrap-v3',
                            text: resultInHTML,
                            layout: 'top',
                            type: 'success',
                            closeWith: ['click', 'button'],
                            callbacks: {
                                onClose: function () {
                                    redirect();
                                },
                            },

                        }).show();
                    } else {
                        new Noty({
                            theme: 'bootstrap-v3', text: data.message, layout: 'top', type: 'success',
                            callbacks: {
                                onClose: function () {
                                    redirect();
                                },
                            },
                        }).show();
                    }
                });//end of $saveDataHandler.done()
                $saveDataHandler.fail(function (data, textStatus, jqXHR) {
                    var infoFromServer = data.responseJSON.message;
                    new Noty({
                        theme: 'bootstrap-v3',
                        text: infoFromServer, type: 'error',
                        layout: 'top',
                        onTemplate: function () {
                            this.barDom.innerHTML = '<div class="noty_body">' + this.options.text + '</div>';
                            // Important: .noty_body class is required for setText API method.
                        }
                    }).show();//end of new Noty()
                });//end of $saveDataHandler.fail()
            }//if the form is valid.
        });//end of $('#saveButton').on('click', anonymous function)


        function redirect() {
            window.location.replace('/InstructorAccounts/ManageInstructorAccount/' + window.customerAccountId);
        }

        //-------------------- setup client-side validation logic --------------------------------
        //http://stackoverflow.com/questions/18754020/bootstrap-3-with-jquery-validation-plugin
        jQuery.validator.setDefaults({
            highlight: function (element, errorClass, validClass) {
                if (element.type === "radio") {
                    this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                } else {
                    $(element).closest('.form-group').removeClass('has-success has-feedback').addClass('has-error has-feedback');
                    $(element).closest('.form-group').find('i.fa').remove();
                    $(element).closest('.form-group').append('<i class="fa fa-exclamation fa-lg form-control-feedback"></i>');
                }
            },
            unhighlight: function (element, errorClass, validClass) {
                if (element.type === "radio") {
                    this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                } else {
                    $(element).closest('.form-group').removeClass('has-error has-feedback').addClass('has-success has-feedback');
                    $(element).closest('.form-group').find('i.fa').remove();
                    $(element).closest('.form-group').append('<i class="fa fa-check fa-lg form-control-feedback"></i>');
                }
            }
        });
        setupFormValidationRules();
        function setupFormValidationRules() {

            //http://forums.asp.net/t/1671546.aspx?Singapore+mobile+phone+validation
            jQuery.validator.addMethod('wageRateRule', function (wage_rate, element) {
                return validateDecimal(wage_rate);
            }, 'Please specify a valid value. E.g. 100 or 100.50');

            jQuery.validator.addMethod("validDateFormatRule", function (value, element) {
                //http://stackoverflow.com/questions/23895451/jquery-validate-ignore-custom-validation-rule-if-no-value
                if (this.optional(element) || value.length == 0) {
                    return true;
                }
                else {
                    //http://stackoverflow.com/questions/24380305/validate-date-in-dd-mm-yyyy-format-using-jquery-validate
                    return moment(value, 'DD/MM/YYYY').isValid();
                }
            }, 'Please enter a valid date in the format DD/MM/YYYY');
            jQuery.validator.addMethod("endDateGreaterThanStartDateRule", function (value, element) {
                // console.log(value);
                // console.log($('#effectiveStartDateInput').val())
                //http://stackoverflow.com/questions/23895451/jquery-validate-ignore-custom-validation-rule-if-no-value
                //https://bhavinrana.wordpress.com/2011/05/14/jquery-validation-end-date-should-be-greater-than-start-date/
                if (this.optional(element) || value.length == 0) {
                    return true;
                }
                else {
                    var collectedStartDateValue = $('#effectiveStartDateInput').val();
                    /* after experimenting for hours, due to the dd/mm/yyyy format, the Date.parse(...) technique
                    here is not applicable */
                    //console.log(Date.parse(startDateValue) > Date.parse(value))
                    // return Date.parse(value) > Date.parse(startDateValue);
                    //Reference: http://stackoverflow.com/questions/39687278/moment-js-how-to-initialize-from-dd-mm-yyyy-format
                    var startDate = moment(collectedStartDateValue, 'DD/MM/YYYY');
                    var endDate = moment(value, 'DD/MM/YYYY');
                    return endDate.isAfter(startDate, 'day')
                }
            }, 'End Date should be greater than Start Date.');
            $('#dataForm').validate({
                rules: {
                    wageRateInput: {
                        required: true,
                        wageRateRule: true
                    },
                    effectiveStartDateInput: {
                        required: true,
                        validDateFormatRule: true

                    },
                    effectiveEndDateInput: {
                        required: false,
                        validDateFormatRule: true,
                        endDateGreaterThanStartDateRule: true
                    }

                },
                messages: {
                    wageRateInput: {
                        required: 'Please enter wage rate for instructor'
                    },
                    effectiveStartDateInput: 'Please enter start date',
                },
                errorPlacement: function (error, element) {

                    if (element.attr('name') == 'effectiveStartDateInput') {
                        error.appendTo(element.parent('div').parent('div'));
                    } else if (element.attr('name') == 'effectiveEndDateInput') {
                        error.appendTo(element.parent('div').parent('div'));
                    } else {
                        error.insertAfter(element);
                    }
                }
            });
        }
        function validateDecimal(value) {
            //http://stackoverflow.com/questions/30606348/check-if-a-given-value-is-a-positive-number-or-float-with-maximum-two-decimal-pl
            var pattern = /^\d+(.\d{1,2})?$/;
            if (pattern.test(value)) {
                return true;
            } else {
                return false;
            }
        }


    </script>
}
